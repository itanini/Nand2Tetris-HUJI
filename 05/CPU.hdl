// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
		//check if a-command
		Not(in=instruction[15], out=aCommand);
		Or(a=instruction[5], b=aCommand, out= aRegLoad);
		
		//chooses what to feed the Aregister with
		Mux16(a=instruction, b=aluOut, sel=instruction[15], out= aRegIn);
		ARegister(in=aRegIn, load=aRegLoad, out= aReg);

		//feed the Dregister
		And(a=instruction[4], b=instruction[15], out=dRegIn);
		DRegister(in=aluOut, load=dRegIn, out= dReg);

		//choses what to put in the alu a-register or the input 
		Mux16(a= aReg, b=inM, sel= instruction[12], out= aluB);
		ALU(x=dReg, y=aluB, zx=instruction[11], nx= instruction[10], zy=instruction[9], ny= instruction[8], f=instruction[7], no=instruction[6], out=aluOut, zr=aluZr, ng=aluNg);
		
		//cheking jump's conditions 
		DMux8Way(in=true, sel=instruction[0..2], a=vec1, b=vec2,c=vec3, d=vec4, e=vec5, f=vec6, g=vec7, h=vec8);
		
		Not(in=aluNg, out=notNg);
		Not(in=aluZr, out=notZr);
		
		And(a=notNg, b=notZr, out=gt);
		And(a= vec2, b=gt, out=jgt);
		
		And(a=vec3, b=aluZr, out= jeq);
		
		Or(a=aluZr, b= notNg, out=ge);
		And(a=vec4, b=ge, out=jge);
		
		And(a=vec5, b=aluNg, out=jlt);
		
		And(a=vec6, b=notZr, out=jne);
		
		Or(a=aluZr, b=aluNg, out=le);
		And(a=vec7, b= le, out=jle);
		
		Or8Way(in[0]=false, in[1]=jgt, in[2]=jeq, in[3]=jge, in[4]=jlt, in[5]=jne, in[6]=jle, in[7]=vec8,out=jmpLoad);
		
		Not(in=vec1, out=notVec1);
		And(a=notVec1, b=instruction[15], out=jmpSel);
		Mux(b=jmpLoad, a=false, sel=jmpSel, out=load);
		
		Not(in=load, out=notLoad);
		
		PC(in=aReg, reset=reset, load=load, inc=notLoad, out[0..14]=pc, out[15]=garbage);
		
		//final output
		And16(a=aluOut, b=aluOut, out=outM);
		And(a=instruction[15], b=instruction[3], out=writeM);
		And16(a=aReg, b=aReg,out[0..14]=addressM, out[15]=junk);
		
	
}